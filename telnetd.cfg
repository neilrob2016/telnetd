# Normally a sighup would cause a re-read of the config file. This prevents
# that.
#ignore_sighup YES

# This takes IP and DNS addresses and uses the '*' and '?' wildcards in
# any location. Eg: *.c*m
# Whitelists and blacklists are mutually exclusive, ie you can have one or the
# other (or neither) but not both.
#ip_whitelist 127.0.0.* 192.168.*
#ip_blacklist *.*.0.1 192.168.0.79 *ru *cn

# The default is no message at all as sending out text each time before closing
# the socket could make an attempted DoS attack worse.
banned_ip_msg "Your address is not on the list, you're not coming in."

# Overridden by -l and -r command line options respectively.
#log_file    ~neil/telnetd.log
#log_file_rm telnetd.log

# Number of write fails to the log file until we revert back to logging to
# stdout. The current fail count gets passed to child processes unchanged.
# Overriden by -f command line option.
log_file_max_fails 3

# Not required unless you're running from the command line.
#be_daemon YES 

# Dump all RX and TX
#hexdump YES 

# Do a DNS lookup for each connection. This defaults to off since it can 
# hang for various reasons occasionally.
dns_lookup YES

# Write the IP (and hostname if dns_lookup on) to the utmp info so that
# the users host can be seen in the "who" command. Only applies when 
# shell_program is set.
store_host_in_utmp YES

# This file is displayed to the user before login. Change for your given OS.
# Can use either "motd_file" or since june 2024 "pre_motd_file"
#motd_file motd_files/mac
#motd_file motd_files/linux
pre_motd_file motd_files/generic

# Post login motd file. Only used if telnetd does the login process via
# shell_program being set. If login_program is set then this is ignored.
post_motd_file motd_files/post_login

# The time the server will wait to move to the login stage if the client 
# doesn't respond to any or all of the requested telnet negotiation options.
telopt_timeout_secs 2

# If you only want telnetd available on a certain network interface
#network_interface en0

# Default = 23 which requires root privs
port 4000

# If the user is received from client then append to login command line args. 
# This should be left as YES unless the login program isn't /bin/login.
login_append_user true

# This passes -p to login which preserves enviroment variables. Overridden by 
# login_program and shell_program.
login_preserve_env YES

# If not set and shell_program not set then telnetd defaults to the standard
# one for your OS. This relies on the login program doing user verification
# (or not as the case may be). -p seems to be required for Linux login to work
# properly.
#login_program "/bin/login -p --"
#login_program "/usr/bin/login" 
#login_program "~neil/bin/basic -s -k --"

# This is a file from which telnetd can load its own username and password
# information which gets around the PAM nonsense with MacOS. However it means
# their MacOS password and telnetd password could differ. Note that if the
# user does not exist on the system then they won't be able to log in anyway
# as they'll fail the getpwnam() check in validate.c
pwd_file telnetd.pwd

# Same as login_program except that telnetd will do its own username/password
# process. This is useful if you're executing a non-login program but need
# user verification first. This can be overriden by the users choice of shell
# program as the optional 3rd field on a telnetd.pwd line.
shell_program  "/bin/bash -l"
#shell_program "~neil/bin/basic -s -k"

# The following options have no effect unless a shell program is specified 
# because then telnetd does the user and login stage, otherwise login_program 
# does it.
# Users not allowed to log in.
#banned_users       root,dummy   # CSV list
banned_user_msg    "You're banned. Clear off!"

# Alternative prompts and messages. None of these are relevant if login_program
# is set as that will do any actual login stages.
login_prompt       "Your name: " 
pwd_prompt         "Your password: "  
login_incorrect_msg    "Nope, try again..."
login_max_attempts_msg "You've had your chance, go away"
login_timeout_msg      "Next time be a bit quicker!"
login_timeout_secs 10
#login_max_attempts 2
#login_pause_secs  2

# Normally at the password prompt nothing is echoed back to the user. If this
# is set each input character is replaced by a star/asterisk.
pwd_asterisks  YES  

# Given to user at login when local password validation fails for some reason 
# other than it being an incorrect password. Eg telnetd.pwd missing.
#login_svrerr_msg  "Something has gone wrong! Bummer! Contact your sys admin."

# If set to yes it'll show telopt terminal resizes. This could be a lot
# of log messages.
#show_term_resize YES
